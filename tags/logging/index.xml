<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Logging on jdhao's digital space</title><link>https://jdhao.github.io/tags/logging/</link><description>Recent content in Logging on jdhao's digital space</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>jdhao</copyright><lastBuildDate>Mon, 11 Mar 2024 23:31:14 +0100</lastBuildDate><atom:link href="https://jdhao.github.io/tags/logging/index.xml" rel="self" type="application/rss+xml"/><item><title>Configure Python logging with dictConfig</title><link>https://jdhao.github.io/2024/03/11/python-logging-dictconfig/</link><pubDate>Mon, 11 Mar 2024 23:30:24 +0100</pubDate><guid>https://jdhao.github.io/2024/03/11/python-logging-dictconfig/</guid><description>Apart from directly configuring the Python logging in the code itself. We can also configuring the logging using fileConfig or dictConfig.
The dictConfig is more powerful than fileConfig and is the recommended way to configure logging.
import json import logging with open(&amp;#34;path/to/logging_conf.json&amp;#34;) as f: conf = json.load(f) logging.config.dictConfig(conf) The content of logging_conf.json:
{ &amp;#34;version&amp;#34;: 1, &amp;#34;disable_existing_loggers&amp;#34;: True, &amp;#34;formatters&amp;#34;: { &amp;#34;standard&amp;#34;:{ &amp;#34;format&amp;#34;: &amp;#34;%(asctime)s [%(levelname)s] [%(name)s:%(lineno)d]: %(message)s&amp;#34; } }, &amp;#34;handlers&amp;#34;: { &amp;#34;console&amp;#34;:{ &amp;#34;level&amp;#34;: &amp;#34;DEBUG&amp;#34;, &amp;#34;formatter&amp;#34;: &amp;#34;standard&amp;#34;, &amp;#34;class&amp;#34;: &amp;#34;logging.</description></item><item><title>What Happened When Logging without Handlers in Python</title><link>https://jdhao.github.io/2022/05/27/logging_without_handlers_python/</link><pubDate>Fri, 27 May 2022 23:27:12 +0800</pubDate><guid>https://jdhao.github.io/2022/05/27/logging_without_handlers_python/</guid><description>&lt;p>I saw a post from stackoverflow asking why his logger does not work as expect?
The code is like:&lt;/p></description></item><item><title>Why Are Some Logging Messages Missing in Python?</title><link>https://jdhao.github.io/2021/04/01/python_log_message_missing/</link><pubDate>Thu, 01 Apr 2021 23:10:56 +0800</pubDate><guid>https://jdhao.github.io/2021/04/01/python_log_message_missing/</guid><description>&lt;p>In my project, I use the &lt;a href="https://docs.python.org/3/library/logging.html">Python logging package&lt;/a> for logging service.&lt;/p></description></item><item><title>Duplicate Logging Messages in Python</title><link>https://jdhao.github.io/2020/06/20/python_duplicate_logging_messages/</link><pubDate>Sat, 20 Jun 2020 00:45:12 +0800</pubDate><guid>https://jdhao.github.io/2020/06/20/python_duplicate_logging_messages/</guid><description>&lt;p>When I am working on a project, I find that the same message is printed twice.
The following minimal code can reproduce this issue:&lt;/p></description></item><item><title>How to Use Unified Logging Config Across Your Project</title><link>https://jdhao.github.io/2020/04/24/python_logging_for_multiple_modules/</link><pubDate>Fri, 24 Apr 2020 01:12:43 +0800</pubDate><guid>https://jdhao.github.io/2020/04/24/python_logging_for_multiple_modules/</guid><description>&lt;p>When we are working on a project, we often need to log some message for easier debugging.
How do we configure logging once and use it across the project?&lt;/p></description></item><item><title>A Simple Guide on How to Use the Python Logging Module</title><link>https://jdhao.github.io/2018/10/12/python_logging_module/</link><pubDate>Fri, 12 Oct 2018 22:13:00 +0800</pubDate><guid>https://jdhao.github.io/2018/10/12/python_logging_module/</guid><description>&lt;p>In the past, I use plain &lt;code>print()&lt;/code> to display some statistics during training process of my models.
However, it is not convenient to save the statistics in a file for later inspection.
Once the program is finished, we do not have an overview of the training process.
I am aware that there are packages such as &lt;a href="https://github.com/lanpa/tensorboardX">tensorboardX&lt;/a> and &lt;a href="https://github.com/facebookresearch/visdom">visdom&lt;/a>,
which are specifically designed for inspecting the various statistics during training.
Right now, I would rather keep the program plain simple and usable.
So I decided to give &lt;a href="https://docs.python.org/3/library/logging.html">Python logging package&lt;/a> a try.&lt;/p></description></item></channel></rss>